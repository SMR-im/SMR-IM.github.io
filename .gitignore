
 if game.PlaceId == 7903991471 then
local upgradetimea
local function GetToolFromCharacter()
    for _, Tool in ipairs(game:GetService("Players").LocalPlayer.Character:GetChildren()) do
        if Tool:IsA("Tool") then
            return Tool
        end
    end
end

local AutoUpgrading = false
local YourDadExists = false

local function AutoUpgrade() -- Auto Upgrades The Tool Your Holding To The Jet
    repeat task.wait(upgradetimea)
        if GetToolFromCharacter() and AutoUpgrading and GetToolFromCharacter().Name ~= "10082" then
            local Args = {
                [1] = {
                    [GetToolFromCharacter().Name] = 1
                }
            }

            task.spawn(function()
                game:GetService("ReplicatedStorage").Functions.Fuse.FuseRF:InvokeServer(unpack(Args))
            end)
        else
            AutoUpgrade()
        end
    until
    YourDadExists == true
end
task.spawn(AutoUpgrade)
local faster
local upgradetimes
local function GetToolFromCharactere()
    for _, Toole in ipairs(game:GetService("Players").LocalPlayer.Character:GetChildren()) do
        if Toole:IsA("Tool") then
            return Toole
        end
    end
end
local AutoUpgradings = false
local YourDadExistss = false

local function AutoUpgrades() 
    repeat task.wait(upgradetimes)
        if GetToolFromCharacter() and AutoUpgradings and GetToolFromCharacter().Name ~= "10082" then
            local Args = {
                [1] = {
                [GetToolFromCharactere().Name] = (faster)
                }
            }

            task.spawn(function()
                game:GetService("ReplicatedStorage").Functions.Fuse.FuseRF:InvokeServer(unpack(Args))
            end)
        else
            AutoUpgrades()
        end
    until
    YourDadExistss == true
end
task.spawn(AutoUpgrades)
local AutoDropping = false
local AutoDropping_Delay = 0
local CurrentAutoDropping = nil

task.spawn(function()
    while task.wait() do
        if GetToolFromCharacter() then
            CurrentAutoDropping = GetToolFromCharacter().Name
        end
    end
end)

local function AutoDrop()
    repeat task.wait(0.2)
        if CurrentAutoDropping and AutoDropping then
            local Args_1 = {
                [1] = game:GetService("Players").LocalPlayer
            }

            game:GetService("ReplicatedStorage").Events.PickAndDrop.DropRE:FireServer(unpack(Args_1))

            local Args_2 = {
                [1] = CurrentAutoDropping
            }

            game:GetService("ReplicatedStorage").Events.PickAndDrop.TakeToolRE:FireServer(unpack(Args_2))
            task.wait(AutoDropping_Delay)
        else
            AutoDrop()
        end
    until
    YourDadExists == true
end
task.spawn(AutoDrop)

local function NormalDupe() -- Dupes A Normal Item (Atleast 6 Of Them Required)
    if GetToolFromCharacter() then
        local Args = {
            [1] = GetToolFromCharacter().Name,
            [2] = 6,
            [3] = "Normal"
        }
        task.spawn(function()
            game:GetService("ReplicatedStorage").Functions.Upgrade.UpgradeRF:InvokeServer(unpack(Args))
        end)
    end
end

local function GoldenDupe() -- Dupes A Golden Item (Atleast 6 Of Them Required)
    if GetToolFromCharacter() then
        local Args = {
            [1] = GetToolFromCharacter().Name,
            [2] = 6,
            [3] = "Golden"
        }
        task.spawn(function()
            game:GetService("ReplicatedStorage").Functions.Upgrade.UpgradeRF:InvokeServer(unpack(Args))
        end)
    end
end

local function ColoredDupe() -- Dupes A Colored Item (Atleast 6 Of Them Required)
    if GetToolFromCharacter() then
        local Args = {
            [1] = GetToolFromCharacter().Name,
            [2] = 6,
            [3] = "Colored"
        }
        task.spawn(function()
            game:GetService("ReplicatedStorage").Functions.Upgrade.UpgradeRF:InvokeServer(unpack(Args))
        end)
    end
end

local AutoNormalDupee = false
local AutoColoredDupee = false
local coloredtime
local normaltime
local function AutoNormalDupe()
    repeat task.wait(normaltime)
        if GetToolFromCharacter() and AutoNormalDupee then
            local Args = {
                [1] = GetToolFromCharacter().Name,
                [2] = 6,
                [3] = "Normal"
            }
            task.spawn(function()
                game:GetService("ReplicatedStorage").Functions.Upgrade.UpgradeRF:InvokeServer(unpack(Args))
            end)
        else
            AutoNormalDupe()
        end
    until
    YourDadExists == true
end
task.spawn(AutoNormalDupe)

local function AutoColoredDupe()
    repeat task.wait(coloredtime)
        if GetToolFromCharacter() and AutoColoredDupee then
            local Args = {
                [1] = GetToolFromCharacter().Name,
                [2] = 6,
                [3] = "Colored"
            }
            task.spawn(function()
                game:GetService("ReplicatedStorage").Functions.Upgrade.UpgradeRF:InvokeServer(unpack(Args))
            end)
        else
            AutoColoredDupe()
        end
    until
    YourDadExists == true
end
task.spawn(AutoColoredDupe)
--UI library


local VLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/vep1032/VepStuff/main/VL"))()
local s    = VLib:Window("666I_NooB228", "Pet Trading", "666")

local ss = s:Tab("Main")
ss:Slider("WalkSpeed",16,250,16,function(t)
local Player                        = game:service'Players'.LocalPlayer;
Player.Character.Humanoid.WalkSpeed = (t) 
end)
ss:Slider("JumpPower",20,250,20,function(t)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = (t)
end)
ss:Button("Infinite Jump",function()
    local Player = game:GetService'Players'.LocalPlayer;
local UIS = game:GetService'UserInputService';

_G.JumpHeight = 50;

function Action(Object, Function) if Object ~= nil then Function(Object); end end

UIS.InputBegan:connect(function(UserInput)
if UserInput.UserInputType == Enum.UserInputType.Keyboard and UserInput.KeyCode == Enum.KeyCode.Space then
Action(Player.Character.Humanoid, function(self)
if self:GetState() == Enum.HumanoidStateType.Jumping or self:GetState() == Enum.HumanoidStateType.Freefall then
Action(self.Parent.HumanoidRootPart, function(self)
    self.Velocity = Vector3.new(0, _G.JumpHeight, 0);
end)
end
end)
end
end)
    end)
ss:Button("Grow Tall Script" ,function()

local LocalPlayer = game:GetService("Players").LocalPlayer
local Character = LocalPlayer.Character
local Humanoid = Character:FindFirstChildOfClass("Humanoid")

function rm()
    for i,v in pairs(Character:GetDescendants()) do
        if v:IsA("BasePart") then
            if v.Name == "Handle" or v.Name == "Head" then
                if Character.Head:FindFirstChild("OriginalSize") then
                    Character.Head.OriginalSize:Destroy()
                end
            else
                for i,cav in pairs(v:GetDescendants()) do
                    if cav:IsA("Attachment") then
                        if cav:FindFirstChild("OriginalPosition") then
                            cav.OriginalPosition:Destroy()  
                        end
                    end
                end
                v:FindFirstChild("OriginalSize"):Destroy()
                if v:FindFirstChild("AvatarPartScaleType") then
                    v:FindFirstChild("AvatarPartScaleType"):Destroy()
                end
            end
        end
    end
end

rm()
wait(0.5)
Humanoid:FindFirstChild("BodyProportionScale"):Destroy()
wait(1)

rm()
wait(0.5)
Humanoid:FindFirstChild("BodyHeightScale"):Destroy()
wait(1)

rm()
wait(0.5)
Humanoid:FindFirstChild("BodyWidthScale"):Destroy()
wait(1)

rm()
wait(0.5)
Humanoid:FindFirstChild("BodyDepthScale"):Destroy()
wait(1)

rm()
wait(0.5)
Humanoid:FindFirstChild("HeadScale"):Destroy()
wait(1)
end)
ss:Button("E To Fly Script",function()
    repeat wait() 
    until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("HumanoidRootPart") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid") 
local mouse = game.Players.LocalPlayer:GetMouse() 
repeat wait() until mouse
local plr      = game.Players.LocalPlayer 
local torso    = plr.Character.HumanoidRootPart 
local flying   = true
local deb      = true 
local ctrl     = {f = 0, b = 0, l = 0, r = 0} 
local lastctrl = {f = 0, b = 0, l = 0, r = 0} 
local maxspeed = 500 
local speed    = 100 
 
function Fly() 
local bg = Instance.new("BodyGyro", torso) 
bg.P = 9e4 
bg.maxTorque = Vector3.new(9e9, 9e9, 9e9) 
bg.cframe = torso.CFrame 
local bv = Instance.new("BodyVelocity", torso) 
bv.velocity = Vector3.new(0,0.1,0) 
bv.maxForce = Vector3.new(9e9, 9e9, 9e9) 
repeat wait() 
plr.Character.Humanoid.PlatformStand = true 
if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then 
speed = speed+.5+(speed/maxspeed) 
if speed > maxspeed then 
speed = maxspeed 
end 
elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then 
speed = speed-1 
if speed < 0 then 
speed = 0 
end 
end 
if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then 
bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r} 
elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then 
bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
else 
bv.velocity = Vector3.new(0,0.1,0) 
end 
bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0) 
until not flying 
ctrl = {f = 0, b = 0, l = 0, r = 0} 
lastctrl = {f = 0, b = 0, l = 0, r = 0} 
speed = 0 
bg:Destroy() 
bv:Destroy() 
plr.Character.Humanoid.PlatformStand = false 
end 
mouse.KeyDown:connect(function(key) 
if key:lower() == "e" then 
if flying then flying = false 
else 
flying = true 
Fly() 
end 
elseif key:lower() == "w" then 
ctrl.f = 1 
elseif key:lower() == "s" then 
ctrl.b = -1 
elseif key:lower() == "a" then 
ctrl.l = -1 
elseif key:lower() == "d" then 
ctrl.r = 1 
end 
end) 
mouse.KeyUp:connect(function(key) 
if key:lower() == "w" then 
ctrl.f = 0 
elseif key:lower() == "s" then 
ctrl.b = 0 
elseif key:lower() == "a" then 
ctrl.l = 0 
elseif key:lower() == "d" then 
ctrl.r = 0 
end 
end)
Fly()
    end)
    ss:Button("Make player invisible F key",function()
                    
        local ScriptStarted = false
        local Keybind = "F" --Set to whatever you want, has to be the name of a KeyCode Enum.
        local Transparency = true --Will make you slightly transparent when you are invisible. No reason to disable.
        local NoClip = false --Will make your fake character no clip.
        
        local Player = game:GetService("Players").LocalPlayer
        local RealCharacter = Player.Character or Player.CharacterAdded:Wait()
        
        local IsInvisible = false
        
        RealCharacter.Archivable = true
        local FakeCharacter = RealCharacter:Clone()
        local Part
        Part = Instance.new("Part", workspace)
        Part.Anchored = true
        Part.Size = Vector3.new(200, 1, 200)
        Part.CFrame = CFrame.new(0, -500, 0) --Set this to whatever you want, just far away from the map.
        Part.CanCollide = true
        FakeCharacter.Parent = workspace
        FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
        
        for i, v in pairs(RealCharacter:GetChildren()) do
          if v:IsA("LocalScript") then
              local clone = v:Clone()
              clone.Disabled = true
              clone.Parent = FakeCharacter
          end
        end
        if Transparency then
          for i, v in pairs(FakeCharacter:GetDescendants()) do
              if v:IsA("BasePart") then
                  v.Transparency = 0.7
              end
          end
        end
        local CanInvis = true
        function RealCharacterDied()
          CanInvis = false
          RealCharacter:Destroy()
          RealCharacter = Player.Character
          CanInvis = true
          isinvisible = false
          FakeCharacter:Destroy()
          workspace.CurrentCamera.CameraSubject = RealCharacter.Humanoid
        
          RealCharacter.Archivable = true
          FakeCharacter = RealCharacter:Clone()
          Part:Destroy()
          Part = Instance.new("Part", workspace)
          Part.Anchored = true
          Part.Size = Vector3.new(200, 1, 200)
          Part.CFrame = CFrame.new(9999, 9999, 9999) --Set this to whatever you want, just far away from the map.
          Part.CanCollide = true
          FakeCharacter.Parent = workspace
          FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
        
          for i, v in pairs(RealCharacter:GetChildren()) do
              if v:IsA("LocalScript") then
                  local clone = v:Clone()
                  clone.Disabled = true
                  clone.Parent = FakeCharacter
              end
          end
          if Transparency then
              for i, v in pairs(FakeCharacter:GetDescendants()) do
                  if v:IsA("BasePart") then
                      v.Transparency = 0.7
                  end
              end
          end
         RealCharacter.Humanoid.Died:Connect(function()
         RealCharacter:Destroy()
         FakeCharacter:Destroy()
         end)
         Player.CharacterAppearanceLoaded:Connect(RealCharacterDied)
        end
        RealCharacter.Humanoid.Died:Connect(function()
         RealCharacter:Destroy()
         FakeCharacter:Destroy()
         end)
        Player.CharacterAppearanceLoaded:Connect(RealCharacterDied)
        local PseudoAnchor
        game:GetService "RunService".RenderStepped:Connect(
          function()
              if PseudoAnchor ~= nil then
                  PseudoAnchor.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
              end
               if NoClip then
              FakeCharacter.Humanoid:ChangeState(11)
               end
          end
        )
        
        PseudoAnchor = FakeCharacter.HumanoidRootPart
        local function Invisible()
          if IsInvisible == false then
              local StoredCF = RealCharacter.HumanoidRootPart.CFrame
              RealCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame
              FakeCharacter.HumanoidRootPart.CFrame = StoredCF
              RealCharacter.Humanoid:UnequipTools()
              Player.Character = FakeCharacter
              workspace.CurrentCamera.CameraSubject = FakeCharacter.Humanoid
              PseudoAnchor = RealCharacter.HumanoidRootPart
              for i, v in pairs(FakeCharacter:GetChildren()) do
                  if v:IsA("LocalScript") then
                      v.Disabled = false
                  end
              end
        
              IsInvisible = true
          else
              local StoredCF = FakeCharacter.HumanoidRootPart.CFrame
              FakeCharacter.HumanoidRootPart.CFrame = RealCharacter.HumanoidRootPart.CFrame
             
              RealCharacter.HumanoidRootPart.CFrame = StoredCF
             
              FakeCharacter.Humanoid:UnequipTools()
              Player.Character = RealCharacter
              workspace.CurrentCamera.CameraSubject = RealCharacter.Humanoid
              PseudoAnchor = FakeCharacter.HumanoidRootPart
              for i, v in pairs(FakeCharacter:GetChildren()) do
                  if v:IsA("LocalScript") then
                      v.Disabled = true
                  end
              end
              IsInvisible = false
          end
        end
        
        game:GetService("UserInputService").InputBegan:Connect(
          function(key, gamep)
              if gamep then
                  return
              end
              if key.KeyCode.Name:lower() == Keybind:lower() and CanInvis and RealCharacter and FakeCharacter then
                  if RealCharacter:FindFirstChild("HumanoidRootPart") and FakeCharacter:FindFirstChild("HumanoidRootPart") then
                      Invisible()
                  end
              end
          end
        )
        local Sound = Instance.new("Sound",game:GetService("SoundService"))
        Sound.SoundId = "rbxassetid://232127604"
        Sound:Play()
        game:GetService("StarterGui"):SetCore("SendNotification",{["Title"] = "Invisible Toggle Loaded",["Text"] = "Press "..Keybind.." to become change visibility.",["Duration"] = 20,["Button1"] = "Okay."})
            end)       
ss:Button("Left ctrl + click to tp",function()
    loadstring(game:HttpGet("https://cdn.wearedevs.net/scripts/Click%20Teleport.txt"))()
    end)
    ss:Button("Fling Peoples Items",function()
            power = 500 -- change this to make it more or less powerful

game:GetService('RunService').Stepped:connect(function()
game.Players.LocalPlayer.Character.Head.CanCollide = false
game.Players.LocalPlayer.Character.UpperTorso.CanCollide = false
game.Players.LocalPlayer.Character.LowerTorso.CanCollide = false
game.Players.LocalPlayer.Character.HumanoidRootPart.CanCollide = false
end)
wait(.1)
local bambam = Instance.new("BodyThrust")
bambam.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bambam.Force = Vector3.new(power,0,power)
bambam.Location = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
wait(0)
power = 500 -- change this to make it more or less powerful

game:GetService('RunService').Stepped:connect(function()
game.Players.LocalPlayer.Character.Head.CanCollide = false
game.Players.LocalPlayer.Character.Torso.CanCollide = false
game.Players.LocalPlayer.Character["Left Leg"].CanCollide = false
game.Players.LocalPlayer.Character["Right Leg"].CanCollide = false
end)

wait(.1)
local bambam = Instance.new("BodyThrust")
bambam.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bambam.Force = Vector3.new(power,0,power)
bambam.Location = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            end)
    ss:Textbox("Put Name here to tp to", true,function(txt)
        Tp=(txt)
        end)
        ss:Toggle("Loop the Tp",function(state)
          if state then
          _G.Loop = true 
          while _G.Loop == true do
          wait(0)
          targetUsername = Tp
        players = game:GetService("Players")
        targetPlayer = players:FindFirstChild(targetUsername)
        players.LocalPlayer.Character:MoveTo(targetPlayer.Character.HumanoidRootPart.Position)
        
          end
                   else
          
          _G.Loop = false
          
                  end
          end)
          
        ss:Button("Grow Really Tall",function()
            --Shit ass script made by failedmite57926

local LocalPlayer = game:GetService("Players").LocalPlayer
local Character = LocalPlayer.Character
local Humanoid = Character:FindFirstChildOfClass("Humanoid")

function rm()
for i,v in pairs(Character:GetDescendants()) do
if v:IsA("BasePart") then
if v.Name == "Handle" or v.Name == "Head" then
    if Character.Head:FindFirstChild("OriginalSize") then
        Character.Head.OriginalSize:Destroy()
    end
else
    for i,cav in pairs(v:GetDescendants()) do
        if cav:IsA("Attachment") then
            if cav:FindFirstChild("OriginalPosition") then
                cav.OriginalPosition:Destroy()  
            end
        end
    end
    v:FindFirstChild("OriginalSize"):Destroy()
    if v:FindFirstChild("AvatarPartScaleType") then
        v:FindFirstChild("AvatarPartScaleType"):Destroy()
    end
end
end
end
end

rm()
wait(0.5)
Humanoid:FindFirstChild("BodyProportionScale"):Destroy()
wait(1)

rm()
wait(0.5)
Humanoid:FindFirstCh
